CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      CS 549 Distributed Systems and Cloud ComputingThe objective of this course is to give students a basic
grounding in designing and implementing distributed and cloud
systems. Developers of cloud services question how those services
should be implemented. What are global consensus and Paxos, and what
are their application in building cloud systems? What are the
advantages and disadvantages of using distributed NoSQL stores such as
Cassandra instead of relational stores such as MySQL?  What are strong
and weak consistency, what is the "CAP Theorem," and what is its
implication for building highly available services? What are the roles
of REST, Websockets and stream processing in cloud applications? This
course will combine hands-on experience in developing cloud services,
with a firm grounding in the tools and principles of building
distributed and cloud applications, including advanced architectures
such as peer-to-peer, publish-subscribe and streaming. Besides cloud
services, we will also be looking at cloud support for batch
processing, such as the Hadoop and Pig frameworks, and their use with
NoSQL data stores such as Cassandra.

    

    Introduction to distributed systems and cloud computing.  Cloud architectures: SaaS, PaaS, IaaS.  End-to-end system design.  Networks and protocol stacks.
      Client-server computing.  Sockets and remote procedure call.  
      Distributed file systems and cache consistency.  NFS, AFS.  Storage in the Cloud: Google/Hadoop file system.
      Web services and REST.  Example: Amazon S3.  The JAX-RS API. Persistent cloud services.
      Failure models and failure detectors.  
      Asynchrony: publish-subscribe.  Server-side events and
      REST.  Web sockets.  Vert.x: Node.js for Java.  Distributed snapshots.
      Distributed debugging.  Time and ordering of events.
      Causal broadcasts.
      Batch cloud computing: map-reduce and Hadoop.
      Domain-specific languages for cloud data processing: Pig and Hive.
      Transactions.  Serializability and recoverability.
      Long-lived transactions.
      Transactions.  Atomic commitment protocols: 2PC and 3PC.
      Highly available services.  Replicated services and
      quorum consensus.  The CAP Theorem.
      NoSQL data stores. Table-based (Google BigTable),
      key-based (Amazon Dynamo), and Cassandra.  The Hector API.
      Query processing with Map-reduce.
      Consensus and the Paxos algorithm.   Applications in the cloud: Google Chubby, Yahoo Zookeeper.
      Peer-to-peer systems.  Distributed hash tables.  Applications in multiplayer game-playing.
      